kind: ManifestVariable
id: cert_manager.enabled
title: Certificate Manager enabled?
info: On/off toggle for the certificate manager
input: {kind: OnOffInput}
category: id::variable-category.security
health_predicates:
  - id::predicate.cert_man_enabled_if_ingress_enabled

---

kind: ManifestVariable
id: cert_manager.email
title: Email for Certificate Manager
info: "Any domains referenced by the ingress must be registered
to this email address. Should not be nil if the certificate manager
is nil."
category: id::variable-category.security
health_predicates:
  - id::predicate.cert_email_defined_if_cert_enabled
validators:
  - kind: FormatPredicate
    check_against: email

---

kind: ManifestVariable
id: cert_manager.server
title: Server URL for Certificate Manager
info: "Most likely a 'letsencrypt' endpoint. For the certificate
manager to consume."
level: default_vars
category: id::variable-category.security
health_predicates:
  - id::predicate.cert_manager_server_is_endpoint

---

kind: Predicate
id: predicate.cert_man_enabled_if_ingress_enabled
title: Certificates Manager enabled if ingress is enabled
info: Ensure that Certificates Manager is enabled if ingress is enabled
reason: Frontend to backend I/O will fail if the backend cannot use HTTPS.
challenge: get::kind::MergedVariablesSupplier->.cert_manager.enabled
operator: truthiness
early_true_if:
  kind: Predicate
  operator: falsiness
  challenge: get::kind::MergedVariablesSupplier->.ingress.enabled

---

kind: FormatPredicate
id: predicate.cert_email_defined_if_cert_enabled
title: Valid email address associated with Certificates Manager?
reason: "The variable 'cert_manager.email' must have a valid email address as
a value."
check_against: email
challenge:  get::kind::MergedVariablesSupplier->.cert_manager.email
early_true_if:
  kind: Predicate
  operator: falsiness
  challenge: get::kind::MergedVariablesSupplier->.cert_manager.enabled

---

kind: Predicate
id: predicate.cert_manager_server_is_endpoint
title: Valid server associated with Certificates Manager?
reason: "The variable 'cert_manager.server' must have a valid endpoint as
a value."
operator: truthiness
challenge: get::kind::MergedVariablesSupplier->.cert_manager.server

---

kind: ResourcesSupplier
id: cer
many: false
#serializer: legacy
selector:
  res_kind: CertificateRequest

