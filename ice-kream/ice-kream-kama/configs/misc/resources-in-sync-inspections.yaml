kind: Predicate
id: predicate.ingress_enabled_resource_in_sync
title: Ingress enabled variable/resource in Sync?
info: "Ensure resource exists if and only if variable set to true"
reason: "The variable 'ingress.enabled' and the Kubernetes resource
are out of sync: the variable is set to 'false' but the resource
exists. This is a normal occurrence when you change the 'ingress.enabled'
variable directly instead of running the operation."
negate: true
challenge:
  kind: ResourcesSupplier
  selector: {res_kind: Ingress}
  output: ". | length"

check_against:
  kind: IfThenElse
  source:
    kind: Predicate
    challenge: get::kind::MergedVariablesSupplier->.ingress.enabled
    operator: truthy
  if_true: 1
  if_false: 0

---

kind: Predicate
id: predicate.publisher_frontend_enabled_resource_in_sync
title: Publisher Frontend enabled variable/resource in Sync?
info: "Ensure resources exists if and only if variable set to true"
reason: "The variable 'publisher_frontend.enabled' and the Kubernetes resource
are out of sync: the variable is set to 'false' but the resource
exists. This is a normal occurrence when you change the 'publisher_frontend.enabled'
variable directly instead of running the operation."

challenge:
  kind: ResourcesSupplier
  selector:
    res_kind: Deployment
    name: publisher-frontend
  output: ". | length"

check_against:
  kind: IfThenElse
  source:
    kind: Predicate
    challenge: get::kind::MergedVariablesSupplier->.publisher_frontend.enabled
    operator: truthy
  if_true: 1
  if_false: 0

---

kind: MultiPredicate
id: predicate.publisher_frontend.redundant_exposure
title: Service type and Ingress consistent with each other?
info: "If ingress is enabled, ensure the service type is ClusterIP."
reason: "The service type is made redundant by your ingress configuration.
If you wish to expose your service via Ingress, the service type should
be trivial, that is 'ClusterIP', otherwise, you might be unintentionally
be double-exposing this service on the public internet."

ingress_enabled: get::kind::MergedVariablesSupplier->.ingress.enabled
routed: get::kind::MergedVariablesSupplier->.ingress.routes.publisher_frontend.host
svc_type: get::kind::MergedVariablesSupplier->.publisher_frontend.service_type
has_ingress_intent:
  kind: MultiPredicate
  predicates: [get::self>>ingress_enabled, get::self>>routed]
predicates:
  - kind: MultiPredicate
    predicates: [get::self>>ingress_enabled, get::self>>routed]
  - kind: Predicate
    operator: in
    challenge: get::self>>svc_type
    check_against: [NodePort, LoadBalancer]
negate: true
