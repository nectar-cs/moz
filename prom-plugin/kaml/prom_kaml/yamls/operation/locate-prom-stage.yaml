kind: Stage
id: nmachine.prom.stage.locate-existing-prom
title: Locate Prometheus API
info: "If you have a monitoring service inside
 or outside in your cluster,
you can point this application to it in order to give
Nectar data capabilities"

steps:
  - id: nmachine.prom.step.locate-existing-prom
    title: Locate Prometheus API
    info: "State whether the server is inside or outside
    the cluster, and point to it."
    synopsis: assets::locate-existing-server.md

    commit:
      standard:
        kind: MergeSupplier
        source: [get::props default_commit->.standard, {enabled: true}]

    action:
      kind: MultiAction
      inherit: sdk.action.step_apply_application_manifest_e2e_action
      config_space: nmachine.prom

    fields:
      - id::prometheus.access_type
      - id::prometheus.url
      - id::prometheus.service_namespace
      - id::prometheus.service_name

    summary_desc: get::nmachine.prom.locate_op_summary

---

id: sdk.misc.ping-monitoring-server
kind: MultiAction
sub_actions:
  - sdk.action.commit_step_values_action
  - kind: RunPredicatesAction
    title: Try to reach monitoring server
    info: Send HTTP to ${endpoint}
    endpoint: get::sdk.supplier.config.prefs .monitoring.url

---

kind: Field
id: prometheus.access_type
variable: id::prometheus.access_type

---

kind: Field
id: prometheus.url
variable: id::prometheus.url
visible:
  kind: Predicate
  print_debug: [inputs]
  challenge: get::props inputs->.prometheus.access_type
  check_against: generic

---

kind: Field
id: prometheus.service_namespace
variable: id::prometheus.service_namespace
visible:
  kind: Predicate
  print_debug: [inputs]
  challenge: get::props inputs->.prometheus.access_type
  check_against: kubernetes

---

kind: Field
id: prometheus.service_name
visible:
  kind: Predicate
  challenge: get::props inputs->.prometheus.service_namespace
  operator: presence
variable:
  kind: ManifestVariable
  inherit: prometheus.service_name
  input:
    kind: SelectInput
    options:
      kind: ResourcesSupplier
      many: true
      selector:
        res_kind: Service
        namespace: "get::self>inputs->.prometheus.service_namespace=>whateger"
      output: options_format
      serializer: legacy
